def get_reward(state, next_state):
    a_fixed, b_fixed, arm_angle, a_distance, b_distance, a_levelled, b_levelled = state
    next_a_fixed, next_b_fixed, next_arm_angle, next_a_distance, next_b_distance, next_a_levelled, next_b_levelled = next_state

    fixed = a_fixed or b_fixed
    levelled = a_levelled and b_levelled
    half_levelled = a_levelled or b_levelled

    next_fixed = next_a_fixed or next_b_fixed
    next_levelled = next_a_levelled and next_b_levelled
    next_half_levelled = next_a_levelled or next_b_levelled

    tipping = arm_angle < next_arm_angle
    untipping = arm_angle > next_arm_angle
    angled = arm_angle == 90
    next_angled = next_arm_angle == 90
    rising = a_distance < next_a_distance or b_distance < next_b_distance
    falling = a_distance > next_a_distance or b_distance > next_b_distance

    levelled_fixed = (a_levelled and a_fixed) or (b_levelled and b_fixed)

    # Fixating a module
    if ((not a_fixed and next_a_fixed) or (not b_fixed and next_b_fixed)):
        # print("fixating a module")
        if (not fixed):
            return 1
        else:
            a_module = (not a_fixed and next_a_fixed)
            b_module = (not b_fixed and next_b_fixed)
            if ((a_module and next_a_levelled) or (b_module and next_b_levelled)):
                return 10
            else:
                return -10

    # Unfixating a module
    if ((a_fixed and not next_a_fixed) or (b_fixed and not next_b_fixed)):
        # print("unfixating a module")
        if (not next_fixed):
            return -100
        else:
            a_module = (a_fixed and not next_a_fixed)
            b_module = (b_fixed and not next_b_fixed)
            if ((a_module and not a_levelled) or (b_module and not b_levelled)):
                return 1
            else:
                return -100

    # Lifting a module
    if (rising or tipping):
        # print("lifting a module")
        if (not fixed):
            if (a_distance == 999 and b_distance == 999):
                return -100
            else:
                return -1
        else:
            if (not levelled_fixed):
                if (not angled):
                    return 1
                else:
                    if (rising):
                        return -1
            else:
                if (levelled):
                    return -10
                else:
                    return 1

    # Lowering a module
    if (falling or untipping):
        #print("lowering a module")
        if (not fixed):
            return 1
        else:
            if (not levelled_fixed):               
                if (half_levelled and not next_half_levelled):
                    return -10
                if (angled and half_levelled and (next_a_distance < 16 and next_b_distance < 16)):
                    return 1
            else:
                if (levelled):
                    return 1
                else:
                    return -10

    # Leveling a module
    if ((not levelled and next_levelled) or (not half_levelled and next_half_levelled)):
        # print("leveling a module")
        return 10
    elif ((levelled and not next_levelled) or (half_levelled and not next_half_levelled)):
        # print("unleveling a module")
        return -100

    return -1